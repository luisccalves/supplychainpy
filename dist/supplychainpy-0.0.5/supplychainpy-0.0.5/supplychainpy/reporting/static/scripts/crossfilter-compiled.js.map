{"version":3,"sources":["crossfilter.js"],"names":[],"mappings":"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","file":"crossfilter-compiled.js","sourcesContent":["(function(exports){\ncrossfilter.version = \"1.3.14\";\nfunction crossfilter_identity(d) {\n  return d;\n}\ncrossfilter.permute = permute;\n\nfunction permute(array, index) {\n  for (var i = 0, n = index.length, copy = new Array(n); i < n; ++i) {\n    copy[i] = array[index[i]];\n  }\n  return copy;\n}\nvar bisect = crossfilter.bisect = bisect_by(crossfilter_identity);\n\nbisect.by = bisect_by;\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nvar heap = crossfilter.heap = heap_by(crossfilter_identity);\n\nheap.by = heap_by;\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\nvar heapselect = crossfilter.heapselect = heapselect_by(crossfilter_identity);\n\nheapselect.by = heapselect_by;\n\nfunction heapselect_by(f) {\n  var heap = heap_by(f);\n\n  // Returns a new array containing the top k elements in the array a[lo:hi].\n  // The returned array is not sorted, but maintains the heap property. If k is\n  // greater than hi - lo, then fewer than k elements will be returned. The\n  // order of elements in a is unchanged by this operation.\n  function heapselect(a, lo, hi, k) {\n    var queue = new Array(k = Math.min(hi - lo, k)),\n        min,\n        i,\n        x,\n        d;\n\n    for (i = 0; i < k; ++i) queue[i] = a[lo++];\n    heap(queue, 0, k);\n\n    if (lo < hi) {\n      min = f(queue[0]);\n      do {\n        if (x = f(d = a[lo]) > min) {\n          queue[0] = d;\n          min = f(heap(queue, 0, k)[0]);\n        }\n      } while (++lo < hi);\n    }\n\n    return queue;\n  }\n\n  return heapselect;\n}\nvar insertionsort = crossfilter.insertionsort = insertionsort_by(crossfilter_identity);\n\ninsertionsort.by = insertionsort_by;\n\nfunction insertionsort_by(f) {\n\n  function insertionsort(a, lo, hi) {\n    for (var i = lo + 1; i < hi; ++i) {\n      for (var j = i, t = a[i], x = f(t); j > lo && f(a[j - 1]) > x; --j) {\n        a[j] = a[j - 1];\n      }\n      a[j] = t;\n    }\n    return a;\n  }\n\n  return insertionsort;\n}\n// Algorithm designed by Vladimir Yaroslavskiy.\n// Implementation based on the Dart project; see lib/dart/LICENSE for details.\n\nvar quicksort = crossfilter.quicksort = quicksort_by(crossfilter_identity);\n\nquicksort.by = quicksort_by;\n\nfunction quicksort_by(f) {\n  var insertionsort = insertionsort_by(f);\n\n  function sort(a, lo, hi) {\n    return (hi - lo < quicksort_sizeThreshold\n        ? insertionsort\n        : quicksort)(a, lo, hi);\n  }\n\n  function quicksort(a, lo, hi) {\n    // Compute the two pivots by looking at 5 elements.\n    var sixth = (hi - lo) / 6 | 0,\n        i1 = lo + sixth,\n        i5 = hi - 1 - sixth,\n        i3 = lo + hi - 1 >> 1,  // The midpoint.\n        i2 = i3 - sixth,\n        i4 = i3 + sixth;\n\n    var e1 = a[i1], x1 = f(e1),\n        e2 = a[i2], x2 = f(e2),\n        e3 = a[i3], x3 = f(e3),\n        e4 = a[i4], x4 = f(e4),\n        e5 = a[i5], x5 = f(e5);\n\n    var t;\n\n    // Sort the selected 5 elements using a sorting network.\n    if (x1 > x2) t = e1, e1 = e2, e2 = t, t = x1, x1 = x2, x2 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n    if (x1 > x3) t = e1, e1 = e3, e3 = t, t = x1, x1 = x3, x3 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x1 > x4) t = e1, e1 = e4, e4 = t, t = x1, x1 = x4, x4 = t;\n    if (x3 > x4) t = e3, e3 = e4, e4 = t, t = x3, x3 = x4, x4 = t;\n    if (x2 > x5) t = e2, e2 = e5, e5 = t, t = x2, x2 = x5, x5 = t;\n    if (x2 > x3) t = e2, e2 = e3, e3 = t, t = x2, x2 = x3, x3 = t;\n    if (x4 > x5) t = e4, e4 = e5, e5 = t, t = x4, x4 = x5, x5 = t;\n\n    var pivot1 = e2, pivotValue1 = x2,\n        pivot2 = e4, pivotValue2 = x4;\n\n    // e2 and e4 have been saved in the pivot variables. They will be written\n    // back, once the partitioning is finished.\n    a[i1] = e1;\n    a[i2] = a[lo];\n    a[i3] = e3;\n    a[i4] = a[hi - 1];\n    a[i5] = e5;\n\n    var less = lo + 1,   // First element in the middle partition.\n        great = hi - 2;  // Last element in the middle partition.\n\n    // Note that for value comparison, <, <=, >= and > coerce to a primitive via\n    // Object.prototype.valueOf; == and === do not, so in order to be consistent\n    // with natural order (such as for Date objects), we must do two compares.\n    var pivotsEqual = pivotValue1 <= pivotValue2 && pivotValue1 >= pivotValue2;\n    if (pivotsEqual) {\n\n      // Degenerated case where the partitioning becomes a dutch national flag\n      // problem.\n      //\n      // [ |  < pivot  | == pivot | unpartitioned | > pivot  | ]\n      //  ^             ^          ^             ^            ^\n      // left         less         k           great         right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1) for x in ]left, less[ : x < pivot.\n      //   2) for x in [less, k[ : x == pivot.\n      //   3) for x in ]great, right[ : x > pivot.\n      for (var k = less; k <= great; ++k) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else if (xk > pivotValue1) {\n\n          // Find the first element <= pivot in the range [k - 1, great] and\n          // put [:ek:] there. We know that such an element must exist:\n          // When k == less, then el3 (which is equal to pivot) lies in the\n          // interval. Otherwise a[k - 1] == pivot and the search stops at k-1.\n          // Note that in the latter case invariant 2 will be violated for a\n          // short amount of time. The invariant will be restored when the\n          // pivots are put into their final positions.\n          while (true) {\n            var greatValue = f(a[great]);\n            if (greatValue > pivotValue1) {\n              great--;\n              // This is the only location in the while-loop where a new\n              // iteration is started.\n              continue;\n            } else if (greatValue < pivotValue1) {\n              // Triple exchange.\n              a[k] = a[less];\n              a[less++] = a[great];\n              a[great--] = ek;\n              break;\n            } else {\n              a[k] = a[great];\n              a[great--] = ek;\n              // Note: if great < k then we will exit the outer loop and fix\n              // invariant 2 (which we just violated).\n              break;\n            }\n          }\n        }\n      }\n    } else {\n\n      // We partition the list into three parts:\n      //  1. < pivot1\n      //  2. >= pivot1 && <= pivot2\n      //  3. > pivot2\n      //\n      // During the loop we have:\n      // [ | < pivot1 | >= pivot1 && <= pivot2 | unpartitioned  | > pivot2  | ]\n      //  ^            ^                        ^              ^             ^\n      // left         less                     k              great        right\n      //\n      // a[left] and a[right] are undefined and are filled after the\n      // partitioning.\n      //\n      // Invariants:\n      //   1. for x in ]left, less[ : x < pivot1\n      //   2. for x in [less, k[ : pivot1 <= x && x <= pivot2\n      //   3. for x in ]great, right[ : x > pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk < pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          ++less;\n        } else {\n          if (xk > pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue > pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] <= pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] >= pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // Move pivots into their final positions.\n    // We shrunk the list from both sides (a[left] and a[right] have\n    // meaningless values in them) and now we move elements from the first\n    // and third partition into these locations so that we can store the\n    // pivots.\n    a[lo] = a[less - 1];\n    a[less - 1] = pivot1;\n    a[hi - 1] = a[great + 1];\n    a[great + 1] = pivot2;\n\n    // The list is now partitioned into three partitions:\n    // [ < pivot1   | >= pivot1 && <= pivot2   |  > pivot2   ]\n    //  ^            ^                        ^             ^\n    // left         less                     great        right\n\n    // Recursive descent. (Don't include the pivot values.)\n    sort(a, lo, less - 1);\n    sort(a, great + 2, hi);\n\n    if (pivotsEqual) {\n      // All elements in the second partition are equal to the pivot. No\n      // need to sort them.\n      return a;\n    }\n\n    // In theory it should be enough to call _doSort recursively on the second\n    // partition.\n    // The Android source however removes the pivot elements from the recursive\n    // call if the second partition is too large (more than 2/3 of the list).\n    if (less < i1 && great > i5) {\n      var lessValue, greatValue;\n      while ((lessValue = f(a[less])) <= pivotValue1 && lessValue >= pivotValue1) ++less;\n      while ((greatValue = f(a[great])) <= pivotValue2 && greatValue >= pivotValue2) --great;\n\n      // Copy paste of the previous 3-way partitioning with adaptions.\n      //\n      // We partition the list into three parts:\n      //  1. == pivot1\n      //  2. > pivot1 && < pivot2\n      //  3. == pivot2\n      //\n      // During the loop we have:\n      // [ == pivot1 | > pivot1 && < pivot2 | unpartitioned  | == pivot2 ]\n      //              ^                      ^              ^\n      //            less                     k              great\n      //\n      // Invariants:\n      //   1. for x in [ *, less[ : x == pivot1\n      //   2. for x in [less, k[ : pivot1 < x && x < pivot2\n      //   3. for x in ]great, * ] : x == pivot2\n      for (var k = less; k <= great; k++) {\n        var ek = a[k], xk = f(ek);\n        if (xk <= pivotValue1 && xk >= pivotValue1) {\n          if (k !== less) {\n            a[k] = a[less];\n            a[less] = ek;\n          }\n          less++;\n        } else {\n          if (xk <= pivotValue2 && xk >= pivotValue2) {\n            while (true) {\n              var greatValue = f(a[great]);\n              if (greatValue <= pivotValue2 && greatValue >= pivotValue2) {\n                great--;\n                if (great < k) break;\n                // This is the only location inside the loop where a new\n                // iteration is started.\n                continue;\n              } else {\n                // a[great] < pivot2.\n                if (greatValue < pivotValue1) {\n                  // Triple exchange.\n                  a[k] = a[less];\n                  a[less++] = a[great];\n                  a[great--] = ek;\n                } else {\n                  // a[great] == pivot1.\n                  a[k] = a[great];\n                  a[great--] = ek;\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // The second partition has now been cleared of pivot elements and looks\n    // as follows:\n    // [  *  |  > pivot1 && < pivot2  | * ]\n    //        ^                      ^\n    //       less                  great\n    // Sort the second partition using recursive descent.\n\n    // The second partition looks as follows:\n    // [  *  |  >= pivot1 && <= pivot2  | * ]\n    //        ^                        ^\n    //       less                    great\n    // Simply sort it by recursive descent.\n\n    return sort(a, less, great + 1);\n  }\n\n  return sort;\n}\n\nvar quicksort_sizeThreshold = 32;\nvar crossfilter_array8 = crossfilter_arrayUntyped,\n    crossfilter_array16 = crossfilter_arrayUntyped,\n    crossfilter_array32 = crossfilter_arrayUntyped,\n    crossfilter_arrayLengthen = crossfilter_arrayLengthenUntyped,\n    crossfilter_arrayWiden = crossfilter_arrayWidenUntyped;\n\nif (typeof Uint8Array !== \"undefined\") {\n  crossfilter_array8 = function(n) { return new Uint8Array(n); };\n  crossfilter_array16 = function(n) { return new Uint16Array(n); };\n  crossfilter_array32 = function(n) { return new Uint32Array(n); };\n\n  crossfilter_arrayLengthen = function(array, length) {\n    if (array.length >= length) return array;\n    var copy = new array.constructor(length);\n    copy.set(array);\n    return copy;\n  };\n\n  crossfilter_arrayWiden = function(array, width) {\n    var copy;\n    switch (width) {\n      case 16: copy = crossfilter_array16(array.length); break;\n      case 32: copy = crossfilter_array32(array.length); break;\n      default: throw new Error(\"invalid array width!\");\n    }\n    copy.set(array);\n    return copy;\n  };\n}\n\nfunction crossfilter_arrayUntyped(n) {\n  var array = new Array(n), i = -1;\n  while (++i < n) array[i] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayLengthenUntyped(array, length) {\n  var n = array.length;\n  while (n < length) array[n++] = 0;\n  return array;\n}\n\nfunction crossfilter_arrayWidenUntyped(array, width) {\n  if (width > 32) throw new Error(\"invalid array width!\");\n  return array;\n}\nfunction crossfilter_filterExact(bisect, value) {\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, value, 0, n), bisect.right(values, value, 0, n)];\n  };\n}\n\nfunction crossfilter_filterRange(bisect, range) {\n  var min = range[0],\n      max = range[1];\n  return function(values) {\n    var n = values.length;\n    return [bisect.left(values, min, 0, n), bisect.left(values, max, 0, n)];\n  };\n}\n\nfunction crossfilter_filterAll(values) {\n  return [0, values.length];\n}\nfunction crossfilter_null() {\n  return null;\n}\nfunction crossfilter_zero() {\n  return 0;\n}\nfunction crossfilter_reduceIncrement(p) {\n  return p + 1;\n}\n\nfunction crossfilter_reduceDecrement(p) {\n  return p - 1;\n}\n\nfunction crossfilter_reduceAdd(f) {\n  return function(p, v) {\n    return p + +f(v);\n  };\n}\n\nfunction crossfilter_reduceSubtract(f) {\n  return function(p, v) {\n    return p - f(v);\n  };\n}\nexports.crossfilter = crossfilter;\n\nfunction crossfilter() {\n  var crossfilter = {\n    add: add,\n    remove: removeData,\n    dimension: dimension,\n    groupAll: groupAll,\n    size: size\n  };\n\n  var data = [], // the records\n      n = 0, // the number of records; data.length\n      m = 0, // a bit mask representing which dimensions are in use\n      M = 8, // number of dimensions that can fit in `filters`\n      filters = crossfilter_array8(0), // M bits per record; 1 is filtered out\n      filterListeners = [], // when the filters change\n      dataListeners = [], // when data is added\n      removeDataListeners = []; // when data is removed\n\n  // Adds the specified new records to this crossfilter.\n  function add(newData) {\n    var n0 = n,\n        n1 = newData.length;\n\n    // If there's actually new data to add…\n    // Merge the new data into the existing data.\n    // Lengthen the filter bitset to handle the new records.\n    // Notify listeners (dimensions and groups) that new data is available.\n    if (n1) {\n      data = data.concat(newData);\n      filters = crossfilter_arrayLengthen(filters, n += n1);\n      dataListeners.forEach(function(l) { l(newData, n0, n1); });\n    }\n\n    return crossfilter;\n  }\n\n  // Removes all records that match the current filters.\n  function removeData() {\n    var newIndex = crossfilter_index(n, n),\n        removed = [];\n    for (var i = 0, j = 0; i < n; ++i) {\n      if (filters[i]) newIndex[i] = j++;\n      else removed.push(i);\n    }\n\n    // Remove all matching records from groups.\n    filterListeners.forEach(function(l) { l(0, [], removed); });\n\n    // Update indexes.\n    removeDataListeners.forEach(function(l) { l(newIndex); });\n\n    // Remove old filters and data by overwriting.\n    for (var i = 0, j = 0, k; i < n; ++i) {\n      if (k = filters[i]) {\n        if (i !== j) filters[j] = k, data[j] = data[i];\n        ++j;\n      }\n    }\n    data.length = j;\n    while (n > j) filters[--n] = 0;\n  }\n\n  // Adds a new dimension with the specified value accessor function.\n  function dimension(value) {\n    var dimension = {\n      filter: filter,\n      filterExact: filterExact,\n      filterRange: filterRange,\n      filterFunction: filterFunction,\n      filterAll: filterAll,\n      top: top,\n      bottom: bottom,\n      group: group,\n      groupAll: groupAll,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var one = ~m & -~m, // lowest unset bit as mask, e.g., 00001000\n        zero = ~one, // inverted one, e.g., 11110111\n        values, // sorted, cached array\n        index, // value rank ↦ object id\n        newValues, // temporary array storing newly-added values\n        newIndex, // temporary array storing newly-added index\n        sort = quicksort_by(function(i) { return newValues[i]; }),\n        refilter = crossfilter_filterAll, // for recomputing filter\n        refilterFunction, // the custom filter function in use\n        indexListeners = [], // when data is added\n        dimensionGroups = [],\n        lo0 = 0,\n        hi0 = 0;\n\n    // Updating a dimension is a two-stage process. First, we must update the\n    // associated filters for the newly-added records. Once all dimensions have\n    // updated their filters, the groups are notified to update.\n    dataListeners.unshift(preAdd);\n    dataListeners.push(postAdd);\n\n    removeDataListeners.push(removeData);\n\n    // Incorporate any existing data into this dimension, and make sure that the\n    // filter bitset is wide enough to handle the new dimension.\n    m |= one;\n    if (M >= 32 ? !one : m & -(1 << M)) {\n      filters = crossfilter_arrayWiden(filters, M <<= 1);\n    }\n    preAdd(data, 0, n);\n    postAdd(data, 0, n);\n\n    // Incorporates the specified new records into this dimension.\n    // This function is responsible for updating filters, values, and index.\n    function preAdd(newData, n0, n1) {\n\n      // Permute new values into natural order using a sorted index.\n      newValues = newData.map(value);\n      newIndex = sort(crossfilter_range(n1), 0, n1);\n      newValues = permute(newValues, newIndex);\n\n      // Bisect newValues to determine which new records are selected.\n      var bounds = refilter(newValues), lo1 = bounds[0], hi1 = bounds[1], i;\n      if (refilterFunction) {\n        for (i = 0; i < n1; ++i) {\n          if (!refilterFunction(newValues[i], i)) filters[newIndex[i] + n0] |= one;\n        }\n      } else {\n        for (i = 0; i < lo1; ++i) filters[newIndex[i] + n0] |= one;\n        for (i = hi1; i < n1; ++i) filters[newIndex[i] + n0] |= one;\n      }\n\n      // If this dimension previously had no data, then we don't need to do the\n      // more expensive merge operation; use the new values and index as-is.\n      if (!n0) {\n        values = newValues;\n        index = newIndex;\n        lo0 = lo1;\n        hi0 = hi1;\n        return;\n      }\n\n      var oldValues = values,\n          oldIndex = index,\n          i0 = 0,\n          i1 = 0;\n\n      // Otherwise, create new arrays into which to merge new and old.\n      values = new Array(n);\n      index = crossfilter_index(n, n);\n\n      // Merge the old and new sorted values, and old and new index.\n      for (i = 0; i0 < n0 && i1 < n1; ++i) {\n        if (oldValues[i0] < newValues[i1]) {\n          values[i] = oldValues[i0];\n          index[i] = oldIndex[i0++];\n        } else {\n          values[i] = newValues[i1];\n          index[i] = newIndex[i1++] + n0;\n        }\n      }\n\n      // Add any remaining old values.\n      for (; i0 < n0; ++i0, ++i) {\n        values[i] = oldValues[i0];\n        index[i] = oldIndex[i0];\n      }\n\n      // Add any remaining new values.\n      for (; i1 < n1; ++i1, ++i) {\n        values[i] = newValues[i1];\n        index[i] = newIndex[i1] + n0;\n      }\n\n      // Bisect again to recompute lo0 and hi0.\n      bounds = refilter(values), lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // When all filters have updated, notify index listeners of the new values.\n    function postAdd(newData, n0, n1) {\n      indexListeners.forEach(function(l) { l(newValues, newIndex, n0, n1); });\n      newValues = newIndex = null;\n    }\n\n    function removeData(reIndex) {\n      for (var i = 0, j = 0, k; i < n; ++i) {\n        if (filters[k = index[i]]) {\n          if (i !== j) values[j] = values[i];\n          index[j] = reIndex[k];\n          ++j;\n        }\n      }\n      values.length = j;\n      while (j < n) index[j++] = 0;\n\n      // Bisect again to recompute lo0 and hi0.\n      var bounds = refilter(values);\n      lo0 = bounds[0], hi0 = bounds[1];\n    }\n\n    // Updates the selected values based on the specified bounds [lo, hi].\n    // This implementation is used by all the public filter methods.\n    function filterIndexBounds(bounds) {\n      var lo1 = bounds[0],\n          hi1 = bounds[1];\n\n      if (refilterFunction) {\n        refilterFunction = null;\n        filterIndexFunction(function(d, i) { return lo1 <= i && i < hi1; });\n        lo0 = lo1;\n        hi0 = hi1;\n        return dimension;\n      }\n\n      var i,\n          j,\n          k,\n          added = [],\n          removed = [];\n\n      // Fast incremental update based on previous lo index.\n      if (lo1 < lo0) {\n        for (i = lo1, j = Math.min(lo0, hi1); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (lo1 > lo0) {\n        for (i = lo0, j = Math.min(lo1, hi0); i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      // Fast incremental update based on previous hi index.\n      if (hi1 > hi0) {\n        for (i = Math.max(lo1, hi0), j = hi1; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          added.push(k);\n        }\n      } else if (hi1 < hi0) {\n        for (i = Math.max(lo0, hi1), j = hi0; i < j; ++i) {\n          filters[k = index[i]] ^= one;\n          removed.push(k);\n        }\n      }\n\n      lo0 = lo1;\n      hi0 = hi1;\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n      return dimension;\n    }\n\n    // Filters this dimension using the specified range, value, or null.\n    // If the range is null, this is equivalent to filterAll.\n    // If the range is an array, this is equivalent to filterRange.\n    // Otherwise, this is equivalent to filterExact.\n    function filter(range) {\n      return range == null\n          ? filterAll() : Array.isArray(range)\n          ? filterRange(range) : typeof range === \"function\"\n          ? filterFunction(range)\n          : filterExact(range);\n    }\n\n    // Filters this dimension to select the exact value.\n    function filterExact(value) {\n      return filterIndexBounds((refilter = crossfilter_filterExact(bisect, value))(values));\n    }\n\n    // Filters this dimension to select the specified range [lo, hi].\n    // The lower bound is inclusive, and the upper bound is exclusive.\n    function filterRange(range) {\n      return filterIndexBounds((refilter = crossfilter_filterRange(bisect, range))(values));\n    }\n\n    // Clears any filters on this dimension.\n    function filterAll() {\n      return filterIndexBounds((refilter = crossfilter_filterAll)(values));\n    }\n\n    // Filters this dimension using an arbitrary function.\n    function filterFunction(f) {\n      refilter = crossfilter_filterAll;\n\n      filterIndexFunction(refilterFunction = f);\n\n      lo0 = 0;\n      hi0 = n;\n\n      return dimension;\n    }\n\n    function filterIndexFunction(f) {\n      var i,\n          k,\n          x,\n          added = [],\n          removed = [];\n\n      for (i = 0; i < n; ++i) {\n        if (!(filters[k = index[i]] & one) ^ !!(x = f(values[i], i))) {\n          if (x) filters[k] &= zero, added.push(k);\n          else filters[k] |= one, removed.push(k);\n        }\n      }\n      filterListeners.forEach(function(l) { l(one, added, removed); });\n    }\n\n    // Returns the top K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function top(k) {\n      var array = [],\n          i = hi0,\n          j;\n\n      while (--i >= lo0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n      }\n\n      return array;\n    }\n\n    // Returns the bottom K selected records based on this dimension's order.\n    // Note: observes this dimension's filter, unlike group and groupAll.\n    function bottom(k) {\n      var array = [],\n          i = lo0,\n          j;\n\n      while (i < hi0 && k > 0) {\n        if (!filters[j = index[i]]) {\n          array.push(data[j]);\n          --k;\n        }\n        i++;\n      }\n\n      return array;\n    }\n\n    // Adds a new group to this dimension, using the specified key function.\n    function group(key) {\n      var group = {\n        top: top,\n        all: all,\n        reduce: reduce,\n        reduceCount: reduceCount,\n        reduceSum: reduceSum,\n        order: order,\n        orderNatural: orderNatural,\n        size: size,\n        dispose: dispose,\n        remove: dispose // for backwards-compatibility\n      };\n\n      // Ensure that this group will be removed when the dimension is removed.\n      dimensionGroups.push(group);\n\n      var groups, // array of {key, value}\n          groupIndex, // object id ↦ group id\n          groupWidth = 8,\n          groupCapacity = crossfilter_capacity(groupWidth),\n          k = 0, // cardinality\n          select,\n          heap,\n          reduceAdd,\n          reduceRemove,\n          reduceInitial,\n          update = crossfilter_null,\n          reset = crossfilter_null,\n          resetNeeded = true,\n          groupAll = key === crossfilter_null;\n\n      if (arguments.length < 1) key = crossfilter_identity;\n\n      // The group listens to the crossfilter for when any dimension changes, so\n      // that it can update the associated reduce values. It must also listen to\n      // the parent dimension for when data is added, and compute new keys.\n      filterListeners.push(update);\n      indexListeners.push(add);\n      removeDataListeners.push(removeData);\n\n      // Incorporate any existing data into the grouping.\n      add(values, index, 0, n);\n\n      // Incorporates the specified new values into this group.\n      // This function is responsible for updating groups and groupIndex.\n      function add(newValues, newIndex, n0, n1) {\n        var oldGroups = groups,\n            reIndex = crossfilter_index(k, groupCapacity),\n            add = reduceAdd,\n            initial = reduceInitial,\n            k0 = k, // old cardinality\n            i0 = 0, // index of old group\n            i1 = 0, // index of new record\n            j, // object id\n            g0, // old group\n            x0, // old key\n            x1, // new key\n            g, // group to add\n            x; // key of group to add\n\n        // If a reset is needed, we don't need to update the reduce values.\n        if (resetNeeded) add = initial = crossfilter_null;\n\n        // Reset the new groups (k is a lower bound).\n        // Also, make sure that groupIndex exists and is long enough.\n        groups = new Array(k), k = 0;\n        groupIndex = k0 > 1 ? crossfilter_arrayLengthen(groupIndex, n) : crossfilter_index(n, groupCapacity);\n\n        // Get the first old key (x0 of g0), if it exists.\n        if (k0) x0 = (g0 = oldGroups[0]).key;\n\n        // Find the first new key (x1), skipping NaN keys.\n        while (i1 < n1 && !((x1 = key(newValues[i1])) >= x1)) ++i1;\n\n        // While new keys remain…\n        while (i1 < n1) {\n\n          // Determine the lesser of the two current keys; new and old.\n          // If there are no old keys remaining, then always add the new key.\n          if (g0 && x0 <= x1) {\n            g = g0, x = x0;\n\n            // Record the new index of the old group.\n            reIndex[i0] = k;\n\n            // Retrieve the next old key.\n            if (g0 = oldGroups[++i0]) x0 = g0.key;\n          } else {\n            g = {key: x1, value: initial()}, x = x1;\n          }\n\n          // Add the lesser group.\n          groups[k] = g;\n\n          // Add any selected records belonging to the added group, while\n          // advancing the new key and populating the associated group index.\n          while (!(x1 > x)) {\n            groupIndex[j = newIndex[i1] + n0] = k;\n            if (!(filters[j] & zero)) g.value = add(g.value, data[j]);\n            if (++i1 >= n1) break;\n            x1 = key(newValues[i1]);\n          }\n\n          groupIncrement();\n        }\n\n        // Add any remaining old groups that were greater than all new keys.\n        // No incremental reduce is needed; these groups have no new records.\n        // Also record the new index of the old group.\n        while (i0 < k0) {\n          groups[reIndex[i0] = k] = oldGroups[i0++];\n          groupIncrement();\n        }\n\n        // If we added any new groups before any old groups,\n        // update the group index of all the old records.\n        if (k > i0) for (i0 = 0; i0 < n0; ++i0) {\n          groupIndex[i0] = reIndex[groupIndex[i0]];\n        }\n\n        // Modify the update and reset behavior based on the cardinality.\n        // If the cardinality is less than or equal to one, then the groupIndex\n        // is not needed. If the cardinality is zero, then there are no records\n        // and therefore no groups to update or reset. Note that we also must\n        // change the registered listener to point to the new method.\n        j = filterListeners.indexOf(update);\n        if (k > 1) {\n          update = updateMany;\n          reset = resetMany;\n        } else {\n          if (!k && groupAll) {\n            k = 1;\n            groups = [{key: null, value: initial()}];\n          }\n          if (k === 1) {\n            update = updateOne;\n            reset = resetOne;\n          } else {\n            update = crossfilter_null;\n            reset = crossfilter_null;\n          }\n          groupIndex = null;\n        }\n        filterListeners[j] = update;\n\n        // Count the number of added groups,\n        // and widen the group index as needed.\n        function groupIncrement() {\n          if (++k === groupCapacity) {\n            reIndex = crossfilter_arrayWiden(reIndex, groupWidth <<= 1);\n            groupIndex = crossfilter_arrayWiden(groupIndex, groupWidth);\n            groupCapacity = crossfilter_capacity(groupWidth);\n          }\n        }\n      }\n\n      function removeData() {\n        if (k > 1) {\n          var oldK = k,\n              oldGroups = groups,\n              seenGroups = crossfilter_index(oldK, oldK);\n\n          // Filter out non-matches by copying matching group index entries to\n          // the beginning of the array.\n          for (var i = 0, j = 0; i < n; ++i) {\n            if (filters[i]) {\n              seenGroups[groupIndex[j] = groupIndex[i]] = 1;\n              ++j;\n            }\n          }\n\n          // Reassemble groups including only those groups that were referred\n          // to by matching group index entries.  Note the new group index in\n          // seenGroups.\n          groups = [], k = 0;\n          for (i = 0; i < oldK; ++i) {\n            if (seenGroups[i]) {\n              seenGroups[i] = k++;\n              groups.push(oldGroups[i]);\n            }\n          }\n\n          if (k > 1) {\n            // Reindex the group index using seenGroups to find the new index.\n            for (var i = 0; i < j; ++i) groupIndex[i] = seenGroups[groupIndex[i]];\n          } else {\n            groupIndex = null;\n          }\n          filterListeners[filterListeners.indexOf(update)] = k > 1\n              ? (reset = resetMany, update = updateMany)\n              : k === 1 ? (reset = resetOne, update = updateOne)\n              : reset = update = crossfilter_null;\n        } else if (k === 1) {\n          if (groupAll) return;\n          for (var i = 0; i < n; ++i) if (filters[i]) return;\n          groups = [], k = 0;\n          filterListeners[filterListeners.indexOf(update)] =\n          update = reset = crossfilter_null;\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is greater than 1.\n      function updateMany(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g;\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g = groups[groupIndex[k]];\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g = groups[groupIndex[k]];\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Reduces the specified selected or deselected records.\n      // This function is only used when the cardinality is 1.\n      function updateOne(filterOne, added, removed) {\n        if (filterOne === one || resetNeeded) return;\n\n        var i,\n            k,\n            n,\n            g = groups[0];\n\n        // Add the added values.\n        for (i = 0, n = added.length; i < n; ++i) {\n          if (!(filters[k = added[i]] & zero)) {\n            g.value = reduceAdd(g.value, data[k]);\n          }\n        }\n\n        // Remove the removed values.\n        for (i = 0, n = removed.length; i < n; ++i) {\n          if ((filters[k = removed[i]] & zero) === filterOne) {\n            g.value = reduceRemove(g.value, data[k]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is greater than 1.\n      function resetMany() {\n        var i,\n            g;\n\n        // Reset all group values.\n        for (i = 0; i < k; ++i) {\n          groups[i].value = reduceInitial();\n        }\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g = groups[groupIndex[i]];\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Recomputes the group reduce values from scratch.\n      // This function is only used when the cardinality is 1.\n      function resetOne() {\n        var i,\n            g = groups[0];\n\n        // Reset the singleton group values.\n        g.value = reduceInitial();\n\n        // Add any selected records.\n        for (i = 0; i < n; ++i) {\n          if (!(filters[i] & zero)) {\n            g.value = reduceAdd(g.value, data[i]);\n          }\n        }\n      }\n\n      // Returns the array of group values, in the dimension's natural order.\n      function all() {\n        if (resetNeeded) reset(), resetNeeded = false;\n        return groups;\n      }\n\n      // Returns a new array containing the top K group values, in reduce order.\n      function top(k) {\n        var top = select(all(), 0, groups.length, k);\n        return heap.sort(top, 0, top.length);\n      }\n\n      // Sets the reduce behavior for this group to use the specified functions.\n      // This method lazily recomputes the reduce values, waiting until needed.\n      function reduce(add, remove, initial) {\n        reduceAdd = add;\n        reduceRemove = remove;\n        reduceInitial = initial;\n        resetNeeded = true;\n        return group;\n      }\n\n      // A convenience method for reducing by count.\n      function reduceCount() {\n        return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n      }\n\n      // A convenience method for reducing by sum(value).\n      function reduceSum(value) {\n        return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n      }\n\n      // Sets the reduce order, using the specified accessor.\n      function order(value) {\n        select = heapselect_by(valueOf);\n        heap = heap_by(valueOf);\n        function valueOf(d) { return value(d.value); }\n        return group;\n      }\n\n      // A convenience method for natural ordering by reduce value.\n      function orderNatural() {\n        return order(crossfilter_identity);\n      }\n\n      // Returns the cardinality of this group, irrespective of any filters.\n      function size() {\n        return k;\n      }\n\n      // Removes this group and associated event listeners.\n      function dispose() {\n        var i = filterListeners.indexOf(update);\n        if (i >= 0) filterListeners.splice(i, 1);\n        i = indexListeners.indexOf(add);\n        if (i >= 0) indexListeners.splice(i, 1);\n        i = removeDataListeners.indexOf(removeData);\n        if (i >= 0) removeDataListeners.splice(i, 1);\n        return group;\n      }\n\n      return reduceCount().orderNatural();\n    }\n\n    // A convenience function for generating a singleton group.\n    function groupAll() {\n      var g = group(crossfilter_null), all = g.all;\n      delete g.all;\n      delete g.top;\n      delete g.order;\n      delete g.orderNatural;\n      delete g.size;\n      g.value = function() { return all()[0].value; };\n      return g;\n    }\n\n    // Removes this dimension and associated groups and event listeners.\n    function dispose() {\n      dimensionGroups.forEach(function(group) { group.dispose(); });\n      var i = dataListeners.indexOf(preAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = dataListeners.indexOf(postAdd);\n      if (i >= 0) dataListeners.splice(i, 1);\n      i = removeDataListeners.indexOf(removeData);\n      if (i >= 0) removeDataListeners.splice(i, 1);\n      m &= zero;\n      return filterAll();\n    }\n\n    return dimension;\n  }\n\n  // A convenience method for groupAll on a dummy dimension.\n  // This implementation can be optimized since it always has cardinality 1.\n  function groupAll() {\n    var group = {\n      reduce: reduce,\n      reduceCount: reduceCount,\n      reduceSum: reduceSum,\n      value: value,\n      dispose: dispose,\n      remove: dispose // for backwards-compatibility\n    };\n\n    var reduceValue,\n        reduceAdd,\n        reduceRemove,\n        reduceInitial,\n        resetNeeded = true;\n\n    // The group listens to the crossfilter for when any dimension changes, so\n    // that it can update the reduce value. It must also listen to the parent\n    // dimension for when data is added.\n    filterListeners.push(update);\n    dataListeners.push(add);\n\n    // For consistency; actually a no-op since resetNeeded is true.\n    add(data, 0, n);\n\n    // Incorporates the specified new values into this group.\n    function add(newData, n0) {\n      var i;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = n0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Reduces the specified selected or deselected records.\n    function update(filterOne, added, removed) {\n      var i,\n          k,\n          n;\n\n      if (resetNeeded) return;\n\n      // Add the added values.\n      for (i = 0, n = added.length; i < n; ++i) {\n        if (!filters[k = added[i]]) {\n          reduceValue = reduceAdd(reduceValue, data[k]);\n        }\n      }\n\n      // Remove the removed values.\n      for (i = 0, n = removed.length; i < n; ++i) {\n        if (filters[k = removed[i]] === filterOne) {\n          reduceValue = reduceRemove(reduceValue, data[k]);\n        }\n      }\n    }\n\n    // Recomputes the group reduce value from scratch.\n    function reset() {\n      var i;\n\n      reduceValue = reduceInitial();\n\n      for (i = 0; i < n; ++i) {\n        if (!filters[i]) {\n          reduceValue = reduceAdd(reduceValue, data[i]);\n        }\n      }\n    }\n\n    // Sets the reduce behavior for this group to use the specified functions.\n    // This method lazily recomputes the reduce value, waiting until needed.\n    function reduce(add, remove, initial) {\n      reduceAdd = add;\n      reduceRemove = remove;\n      reduceInitial = initial;\n      resetNeeded = true;\n      return group;\n    }\n\n    // A convenience method for reducing by count.\n    function reduceCount() {\n      return reduce(crossfilter_reduceIncrement, crossfilter_reduceDecrement, crossfilter_zero);\n    }\n\n    // A convenience method for reducing by sum(value).\n    function reduceSum(value) {\n      return reduce(crossfilter_reduceAdd(value), crossfilter_reduceSubtract(value), crossfilter_zero);\n    }\n\n    // Returns the computed reduce value.\n    function value() {\n      if (resetNeeded) reset(), resetNeeded = false;\n      return reduceValue;\n    }\n\n    // Removes this group and associated event listeners.\n    function dispose() {\n      var i = filterListeners.indexOf(update);\n      if (i >= 0) filterListeners.splice(i);\n      i = dataListeners.indexOf(add);\n      if (i >= 0) dataListeners.splice(i);\n      return group;\n    }\n\n    return reduceCount();\n  }\n\n  // Returns the number of records in this crossfilter, irrespective of any filters.\n  function size() {\n    return n;\n  }\n\n  return arguments.length\n      ? add(arguments[0])\n      : crossfilter;\n}\n\n// Returns an array of size n, big enough to store ids up to m.\nfunction crossfilter_index(n, m) {\n  return (m < 0x101\n      ? crossfilter_array8 : m < 0x10001\n      ? crossfilter_array16\n      : crossfilter_array32)(n);\n}\n\n// Constructs a new array of size n, with sequential values from 0 to n - 1.\nfunction crossfilter_range(n) {\n  var range = crossfilter_index(n, n);\n  for (var i = -1; ++i < n;) range[i] = i;\n  return range;\n}\n\nfunction crossfilter_capacity(w) {\n  return w === 8\n      ? 0x100 : w === 16\n      ? 0x10000\n      : 0x100000000;\n}\n})(typeof exports !== 'undefined' && exports || this);\n"]}